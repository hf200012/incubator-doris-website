(window.webpackJsonp=window.webpackJsonp||[]).push([[638],{1087:function(e,t,a){"use strict";a.r(t);var _=a(56),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"be-配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-配置项"}},[e._v("#")]),e._v(" BE 配置项")]),e._v(" "),a("p",[e._v("该文档主要介绍 BE 的相关配置项。")]),e._v(" "),a("p",[e._v("BE 的配置文件 "),a("code",[e._v("be.conf")]),e._v(" 通常存放在 BE 部署路径的 "),a("code",[e._v("conf/")]),e._v(" 目录下。 而在 0.14 版本中会引入另一个配置文件 "),a("code",[e._v("be_custom.conf")]),e._v("。该配置文件用于记录用户在运行时动态配置并持久化的配置项。")]),e._v(" "),a("p",[e._v("BE 进程启动后，会先读取 "),a("code",[e._v("be.conf")]),e._v(" 中的配置项，之后再读取 "),a("code",[e._v("be_custom.conf")]),e._v(" 中的配置项。"),a("code",[e._v("be_custom.conf")]),e._v(" 中的配置项会覆盖 "),a("code",[e._v("be.conf")]),e._v(" 中相同的配置项。")]),e._v(" "),a("h2",{attrs:{id:"查看配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看配置项"}},[e._v("#")]),e._v(" 查看配置项")]),e._v(" "),a("p",[e._v("用户可以通过访问 BE 的 Web 页面查看当前配置项：")]),e._v(" "),a("p",[a("code",[e._v("http://be_host:be_webserver_port/varz")])]),e._v(" "),a("h2",{attrs:{id:"设置配置项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置配置项"}},[e._v("#")]),e._v(" 设置配置项")]),e._v(" "),a("p",[e._v("BE 的配置项有两种方式进行配置：")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("静态配置")]),e._v(" "),a("p",[e._v("在 "),a("code",[e._v("conf/be.conf")]),e._v(" 文件中添加和设置配置项。"),a("code",[e._v("be.conf")]),e._v(" 中的配置项会在 BE 进行启动时被读取。没有在 "),a("code",[e._v("be.conf")]),e._v(" 中的配置项将使用默认值。")])]),e._v(" "),a("li",[a("p",[e._v("动态配置")]),e._v(" "),a("p",[e._v("BE 启动后，可以通过以下命令动态设置配置项。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}'\n")])])]),a("p",[e._v("在 0.13 版本及之前，通过该方式修改的配置项将在 BE 进程重启后失效。在 0.14 及之后版本中，可以通过以下命令持久化修改后的配置。修改后的配置项存储在 "),a("code",[e._v("be_custom.conf")]),e._v(" 文件中。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -X POST http://{be_ip}:{be_http_port}/api/update_config?{key}={value}&persist=true'\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"应用举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用举例"}},[e._v("#")]),e._v(" 应用举例")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("静态方式修改 "),a("code",[e._v("max_compaction_concurrency")])]),e._v(" "),a("p",[e._v("通过在 "),a("code",[e._v("be.conf")]),e._v(" 文件中添加：")]),e._v(" "),a("p",[a("code",[e._v("max_compaction_concurrency=5")])]),e._v(" "),a("p",[e._v("之后重启 BE 进程以生效该配置。")])]),e._v(" "),a("li",[a("p",[e._v("动态方式修改 "),a("code",[e._v("streaming_load_max_mb")])]),e._v(" "),a("p",[e._v("BE 启动后，通过下面命令动态设置配置项 "),a("code",[e._v("streaming_load_max_mb")]),e._v(":")]),e._v(" "),a("p",[a("code",[e._v("curl -X POST http://{be_ip}:{be_http_port}/api/update_config?streaming_load_max_mb=1024")])]),e._v(" "),a("p",[e._v("返回值如下，则说明设置成功。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "status": "OK",\n    "msg": ""\n}\n')])])]),a("p",[e._v("BE 重启后该配置将失效。如果想持久化修改结果，使用如下命令：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("curl -X POST http://{be_ip}:{be_http_port}/api/update_config?streaming_load_max_mb=1024\\&persist=true\n")])])])])]),e._v(" "),a("h2",{attrs:{id:"配置项列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置项列表"}},[e._v("#")]),e._v(" 配置项列表")]),e._v(" "),a("h3",{attrs:{id:"alter-tablet-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#alter-tablet-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("alter_tablet_worker_count")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("进行schema change的线程数")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-check-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-check-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_check_interval_seconds")])]),e._v(" "),a("p",[e._v("默认值：60 （s）")]),e._v(" "),a("p",[e._v("BaseCompaction线程轮询的间隔")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-interval-seconds-since-last-operation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-interval-seconds-since-last-operation"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_interval_seconds_since_last_operation")])]),e._v(" "),a("p",[e._v("默认值：86400")]),e._v(" "),a("p",[e._v("BaseCompaction触发条件之一：上一次BaseCompaction距今的间隔")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-num-cumulative-deltas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-num-cumulative-deltas"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_num_cumulative_deltas")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("BaseCompaction触发条件之一：Cumulative文件数目要达到的限制，达到这个限制之后会触发BaseCompaction")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-num-threads-per-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-num-threads-per-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_num_threads_per_disk")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("每个磁盘执行BaseCompaction任务的线程数目")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-write-mbytes-per-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-write-mbytes-per-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_write_mbytes_per_sec")])]),e._v(" "),a("p",[e._v("默认值：5（MB）")]),e._v(" "),a("p",[e._v("BaseCompaction任务每秒写磁盘最大速度")]),e._v(" "),a("h3",{attrs:{id:"base-cumulative-delta-ratio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-cumulative-delta-ratio"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_cumulative_delta_ratio")])]),e._v(" "),a("p",[e._v("默认值：0.3  （30%）")]),e._v(" "),a("p",[e._v("BaseCompaction触发条件之一：Cumulative文件大小达到Base文件的比例")]),e._v(" "),a("h3",{attrs:{id:"base-compaction-trace-threshold"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#base-compaction-trace-threshold"}},[e._v("#")]),e._v(" "),a("code",[e._v("base_compaction_trace_threshold")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：打印base compaction的trace信息的阈值，单位秒")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("p",[e._v("base compaction是一个耗时较长的后台操作，为了跟踪其运行信息，可以调整这个阈值参数来控制trace日志的打印。打印信息如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('W0610 11:26:33.804431 56452 storage_engine.cpp:552] Trace:\n0610 11:23:03.727535 (+     0us) storage_engine.cpp:554] start to perform base compaction\n0610 11:23:03.728961 (+  1426us) storage_engine.cpp:560] found best tablet 546859\n0610 11:23:03.728963 (+     2us) base_compaction.cpp:40] got base compaction lock\n0610 11:23:03.729029 (+    66us) base_compaction.cpp:44] rowsets picked\n0610 11:24:51.784439 (+108055410us) compaction.cpp:46] got concurrency lock and start to do compaction\n0610 11:24:51.784818 (+   379us) compaction.cpp:74] prepare finished\n0610 11:26:33.359265 (+101574447us) compaction.cpp:87] merge rowsets finished\n0610 11:26:33.484481 (+125216us) compaction.cpp:102] output rowset built\n0610 11:26:33.484482 (+     1us) compaction.cpp:106] check correctness finished\n0610 11:26:33.513197 (+ 28715us) compaction.cpp:110] modify rowsets finished\n0610 11:26:33.513300 (+   103us) base_compaction.cpp:49] compaction finished\n0610 11:26:33.513441 (+   141us) base_compaction.cpp:56] unused rowsets have been moved to GC queue\nMetrics: {"filtered_rows":0,"input_row_num":3346807,"input_rowsets_count":42,"input_rowsets_data_size":1256413170,"input_segments_num":44,"merge_rowsets_latency_us":101574444,"merged_rows":0,"output_row_num":3346807,"output_rowset_data_size":1228439659,"output_segments_num":6}\n')])])]),a("h3",{attrs:{id:"be-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-port"}},[e._v("#")]),e._v(" "),a("code",[e._v("be_port")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE 上 thrift server 的端口号，用于接收来自 FE 的请求")]),e._v(" "),a("li",[e._v("默认值：9060")])]),e._v(" "),a("h3",{attrs:{id:"be-service-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#be-service-threads"}},[e._v("#")]),e._v(" "),a("code",[e._v("be_service_threads")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE 上 thrift server service的执行线程数，代表可以用于执行FE请求的线程数。")]),e._v(" "),a("li",[e._v("默认值：64")])]),e._v(" "),a("h3",{attrs:{id:"brpc-max-body-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brpc-max-body-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("brpc_max_body_size")])]),e._v(" "),a("p",[e._v("这个配置主要用来修改 brpc 的参数 "),a("code",[e._v("max_body_size")]),e._v("。")]),e._v(" "),a("p",[e._v("有时查询失败，在 BE 日志中会出现 "),a("code",[e._v("body_size is too large")]),e._v(" 的错误信息。这可能发生在 SQL 模式为 multi distinct + 无 group by + 超过1T 数据量的情况下。这个错误表示 brpc 的包大小超过了配置值。此时可以通过调大该配置避免这个错误。")]),e._v(" "),a("h3",{attrs:{id:"brpc-socket-max-unwritten-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brpc-socket-max-unwritten-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("brpc_socket_max_unwritten_bytes")])]),e._v(" "),a("p",[e._v("这个配置主要用来修改 brpc  的参数 "),a("code",[e._v("socket_max_unwritten_bytes")]),e._v("。")]),e._v(" "),a("p",[e._v("有时查询失败，BE 日志中会出现 "),a("code",[e._v("The server is overcrowded")]),e._v(" 的错误信息，表示连接上有过多的未发送数据。当查询需要发送较大的bitmap字段时，可能会遇到该问题，此时可能通过调大该配置避免该错误。")]),e._v(" "),a("h3",{attrs:{id:"transfer-data-by-brpc-attachment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transfer-data-by-brpc-attachment"}},[e._v("#")]),e._v(" "),a("code",[e._v("transfer_data_by_brpc_attachment")])]),e._v(" "),a("ul",[a("li",[e._v("类型: bool")]),e._v(" "),a("li",[e._v("描述：该配置用来控制是否将ProtoBuf Request中的RowBatch转移到Controller Attachment后通过brpc发送。ProtoBuf Request的长度超过2G时会报错： Bad request, error_text=[E1003]Fail to compress request，将RowBatch放到Controller Attachment中将更快且避免这个错误。")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("h3",{attrs:{id:"brpc-num-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brpc-num-threads"}},[e._v("#")]),e._v(" "),a("code",[e._v("brpc_num_threads")])]),e._v(" "),a("p",[e._v("该配置主要用来修改brpc中bthreads的数量. 该配置的默认值被设置为-1, 这意味着bthreads的数量将被设置为机器的cpu核数。")]),e._v(" "),a("p",[e._v("用户可以将该配置的值调大来获取更好的QPS性能。更多的信息可以参考"),a("code",[e._v("https://github.com/apache/incubator-brpc/blob/master/docs/cn/benchmark.md")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"brpc-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brpc-port"}},[e._v("#")]),e._v(" "),a("code",[e._v("brpc_port")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE 上的 brpc 的端口，用于 BE 之间通讯")]),e._v(" "),a("li",[e._v("默认值：8060")])]),e._v(" "),a("h3",{attrs:{id:"buffer-pool-clean-pages-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool-clean-pages-limit"}},[e._v("#")]),e._v(" "),a("code",[e._v("buffer_pool_clean_pages_limit")])]),e._v(" "),a("p",[e._v("默认值：20G")]),e._v(" "),a("p",[e._v("清理可能被缓冲池保存的Page")]),e._v(" "),a("h3",{attrs:{id:"buffer-pool-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#buffer-pool-limit"}},[e._v("#")]),e._v(" "),a("code",[e._v("buffer_pool_limit")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("描述：buffer pool之中最大的可分配内存")]),e._v(" "),a("li",[e._v("默认值：80G")])]),e._v(" "),a("p",[e._v("BE缓存池最大的内存可用量，buffer pool是BE新的内存管理结构，通过buffer page来进行内存管理，并能够实现数据的落盘。并发的所有查询的内存申请都会通过buffer pool来申请。当前buffer pool仅作用在"),a("strong",[e._v("AggregationNode")]),e._v("与"),a("strong",[e._v("ExchangeNode")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"check-auto-compaction-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-auto-compaction-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("check_auto_compaction_interval_seconds")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：当自动执行compaction的功能关闭时，检查自动compaction开关是否被开启的时间间隔。")]),e._v(" "),a("li",[e._v("默认值：5")])]),e._v(" "),a("h3",{attrs:{id:"check-consistency-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-consistency-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("check_consistency_worker_count")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("计算tablet的校验和(checksum)的工作线程数")]),e._v(" "),a("h3",{attrs:{id:"chunk-reserved-bytes-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk-reserved-bytes-limit"}},[e._v("#")]),e._v(" "),a("code",[e._v("chunk_reserved_bytes_limit")])]),e._v(" "),a("p",[e._v("默认值：2147483648")]),e._v(" "),a("p",[e._v("Chunk Allocator的reserved bytes限制，默认为2GB，增加这个变量可以提高性能，但是会获得更多其他模块无法使用的空闲内存")]),e._v(" "),a("h3",{attrs:{id:"clear-transaction-task-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clear-transaction-task-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("clear_transaction_task_worker_count")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("用于清理事务的线程数")]),e._v(" "),a("h3",{attrs:{id:"clone-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clone-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("clone_worker_count")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("用于执行克隆任务的线程数")]),e._v(" "),a("h3",{attrs:{id:"cluster-id"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cluster-id"}},[e._v("#")]),e._v(" "),a("code",[e._v("cluster_id")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：int32")])]),e._v(" "),a("li",[a("p",[e._v("描述：配置BE的所属于的集群id。")])]),e._v(" "),a("li",[a("p",[e._v("默认值：-1")])])]),e._v(" "),a("p",[e._v("该值通常由FE通过心跳向BE下发，不需要额外进行配置。当确认某BE属于某一个确定的Drois集群时，可以进行配置，同时需要修改数据目录下的cluster_id文件，使二者相同。")]),e._v(" "),a("h3",{attrs:{id:"column-dictionary-key-ratio-threshold"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#column-dictionary-key-ratio-threshold"}},[e._v("#")]),e._v(" "),a("code",[e._v("column_dictionary_key_ratio_threshold")])]),e._v(" "),a("p",[e._v("默认值：0")]),e._v(" "),a("p",[e._v("字符串类型的取值比例，小于这个比例采用字典压缩算法")]),e._v(" "),a("h3",{attrs:{id:"column-dictionary-key-size-threshold"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#column-dictionary-key-size-threshold"}},[e._v("#")]),e._v(" "),a("code",[e._v("column_dictionary_key_size_threshold")])]),e._v(" "),a("p",[e._v("默认值：0")]),e._v(" "),a("p",[e._v("字典压缩列大小，小于这个值采用字典压缩算法")]),e._v(" "),a("h3",{attrs:{id:"compaction-tablet-compaction-score-factor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compaction-tablet-compaction-score-factor"}},[e._v("#")]),e._v(" "),a("code",[e._v("compaction_tablet_compaction_score_factor")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：选择tablet进行compaction时，计算 tablet score 的公式中 compaction score的权重。")]),e._v(" "),a("li",[e._v("默认值：1")])]),e._v(" "),a("h3",{attrs:{id:"compaction-tablet-scan-frequency-factor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compaction-tablet-scan-frequency-factor"}},[e._v("#")]),e._v(" "),a("code",[e._v("compaction_tablet_scan_frequency_factor")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：选择tablet进行compaction时，计算 tablet score 的公式中 tablet scan frequency 的权重。")]),e._v(" "),a("li",[e._v("默认值：0")])]),e._v(" "),a("p",[e._v("选择一个tablet执行compaction任务时，可以将tablet的scan频率作为一个选择依据，对当前最近一段时间频繁scan的tablet优先执行compaction。\ntablet score可以通过以下公式计算：")]),e._v(" "),a("p",[e._v("tablet_score = compaction_tablet_scan_frequency_factor * tablet_scan_frequency + compaction_tablet_compaction_score_factor * compaction_score")]),e._v(" "),a("h3",{attrs:{id:"compaction-task-num-per-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compaction-task-num-per-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("compaction_task_num_per_disk")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：每个磁盘可以并发执行的compaction任务数量。")]),e._v(" "),a("li",[e._v("默认值：2")])]),e._v(" "),a("h3",{attrs:{id:"compress-rowbatches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compress-rowbatches"}},[e._v("#")]),e._v(" "),a("code",[e._v("compress_rowbatches")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：bool")])]),e._v(" "),a("li",[a("p",[e._v("描述：序列化RowBatch时是否使用Snappy压缩算法进行数据压缩")])]),e._v(" "),a("li",[a("p",[e._v("默认值：true")])])]),e._v(" "),a("h3",{attrs:{id:"create-tablet-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-tablet-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("create_tablet_worker_count")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("BE创建tablet的工作线程数")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-rounds-for-each-base-compaction-round"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-rounds-for-each-base-compaction-round"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_rounds_for_each_base_compaction_round")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：Compaction任务的生产者每次连续生产多少轮cumulative compaction任务后生产一轮base compaction。")]),e._v(" "),a("li",[e._v("默认值：9")])]),e._v(" "),a("h3",{attrs:{id:"disable-auto-compaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disable-auto-compaction"}},[e._v("#")]),e._v(" "),a("code",[e._v("disable_auto_compaction")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：关闭自动执行compaction任务")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("p",[e._v("一般需要为关闭状态，当调试或测试环境中想要手动操作compaction任务时，可以对该配置进行开启")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-budgeted-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-budgeted-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_budgeted_bytes")])]),e._v(" "),a("p",[e._v("默认值：104857600")]),e._v(" "),a("p",[e._v("BaseCompaction触发条件之一：Singleton文件大小限制，100MB")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-check-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-check-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_check_interval_seconds")])]),e._v(" "),a("p",[e._v("默认值：10 （s）")]),e._v(" "),a("p",[e._v("CumulativeCompaction线程轮询的间隔")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-num-threads-per-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-num-threads-per-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_num_threads_per_disk")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("每个磁盘执行CumulativeCompaction线程数")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-skip-window-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-skip-window-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_skip_window_seconds")])]),e._v(" "),a("p",[e._v("默认值：30 （s）")]),e._v(" "),a("p",[e._v("CumulativeCompaction会跳过最近发布的增量，以防止压缩可能被查询的版本（以防查询计划阶段花费一些时间）。改参数是设置跳过的窗口时间大小")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-trace-threshold"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-trace-threshold"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_trace_threshold")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：打印cumulative compaction的trace信息的阈值，单位秒")]),e._v(" "),a("li",[e._v("默认值：2")])]),e._v(" "),a("p",[e._v("与base_compaction_trace_threshold类似。")]),e._v(" "),a("h3",{attrs:{id:"disable-compaction-trace-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disable-compaction-trace-log"}},[e._v("#")]),e._v(" disable_compaction_trace_log")]),e._v(" "),a("ul",[a("li",[e._v("类型: bool")]),e._v(" "),a("li",[e._v("描述: 关闭compaction的trace日志")]),e._v(" "),a("li",[e._v("默认值: true")])]),e._v(" "),a("p",[e._v("如果设置为true，"),a("code",[e._v("cumulative_compaction_trace_threshold")]),e._v(" 和 "),a("code",[e._v("base_compaction_trace_threshold")]),e._v(" 将不起作用。并且trace日志将关闭。")]),e._v(" "),a("h3",{attrs:{id:"cumulative-compaction-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-compaction-policy"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_compaction_policy")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("描述：配置 cumulative compaction 阶段的合并策略，目前实现了两种合并策略，num_based和size_based")]),e._v(" "),a("li",[e._v("默认值：size_based")])]),e._v(" "),a("p",[e._v("详细说明，ordinary，是最初版本的cumulative compaction合并策略，做一次cumulative compaction之后直接base compaction流程。size_based，通用策略是ordinary策略的优化版本，仅当rowset的磁盘体积在相同数量级时才进行版本合并。合并之后满足条件的rowset进行晋升到base compaction阶段。能够做到在大量小批量导入的情况下：降低base compact的写入放大率，并在读取放大率和空间放大率之间进行权衡，同时减少了文件版本的数据。")]),e._v(" "),a("h3",{attrs:{id:"cumulative-size-based-promotion-size-mbytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-size-based-promotion-size-mbytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_size_based_promotion_size_mbytes")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：在size_based策略下，cumulative compaction的输出rowset总磁盘大小超过了此配置大小，该rowset将用于base compaction。单位是m字节。")]),e._v(" "),a("li",[e._v("默认值：1024")])]),e._v(" "),a("p",[e._v("一般情况下，配置在2G以内，为了防止cumulative compaction时间过长，导致版本积压。")]),e._v(" "),a("h3",{attrs:{id:"cumulative-size-based-promotion-ratio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-size-based-promotion-ratio"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_size_based_promotion_ratio")])]),e._v(" "),a("ul",[a("li",[e._v("类型：double")]),e._v(" "),a("li",[e._v("描述：在size_based策略下，cumulative compaction的输出rowset总磁盘大小超过base版本rowset的配置比例时，该rowset将用于base compaction。")]),e._v(" "),a("li",[e._v("默认值：0.05")])]),e._v(" "),a("p",[e._v("一般情况下，建议配置不要高于0.1，低于0.02。")]),e._v(" "),a("h3",{attrs:{id:"cumulative-size-based-promotion-min-size-mbytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-size-based-promotion-min-size-mbytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_size_based_promotion_min_size_mbytes")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：在size_based策略下，cumulative compaction的输出rowset总磁盘大小低于此配置大小，该rowset将不进行base compaction，仍然处于cumulative compaction流程中。单位是m字节。")]),e._v(" "),a("li",[e._v("默认值：64")])]),e._v(" "),a("p",[e._v("一般情况下，配置在512m以内，配置过大会导致base版本早期的大小过小，一直不进行base compaction。")]),e._v(" "),a("h3",{attrs:{id:"cumulative-size-based-compaction-lower-size-mbytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cumulative-size-based-compaction-lower-size-mbytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("cumulative_size_based_compaction_lower_size_mbytes")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：在size_based策略下，cumulative compaction进行合并时，选出的要进行合并的rowset的总磁盘大小大于此配置时，才按级别策略划分合并。小于这个配置时，直接执行合并。单位是m字节。")]),e._v(" "),a("li",[e._v("默认值：64")])]),e._v(" "),a("p",[e._v("一般情况下，配置在128m以内，配置过大会导致cumulative compaction写放大较多。")]),e._v(" "),a("h3",{attrs:{id:"custom-config-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-config-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("custom_config_dir")])]),e._v(" "),a("p",[e._v("配置 "),a("code",[e._v("be_custom.conf")]),e._v(" 文件的位置。默认为 "),a("code",[e._v("conf/")]),e._v(" 目录下。")]),e._v(" "),a("p",[e._v("在某些部署环境下，"),a("code",[e._v("conf/")]),e._v(" 目录可能因为系统的版本升级被覆盖掉。这会导致用户在运行是持久化修改的配置项也被覆盖。这时，我们可以将 "),a("code",[e._v("be_custom.conf")]),e._v(" 存储在另一个指定的目录中，以防止配置文件被覆盖。")]),e._v(" "),a("h3",{attrs:{id:"default-num-rows-per-column-file-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-num-rows-per-column-file-block"}},[e._v("#")]),e._v(" "),a("code",[e._v("default_num_rows_per_column_file_block")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：配置单个RowBlock之中包含多少行的数据。")]),e._v(" "),a("li",[e._v("默认值：1024")])]),e._v(" "),a("h3",{attrs:{id:"default-rowset-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default-rowset-type"}},[e._v("#")]),e._v(" "),a("code",[e._v("default_rowset_type")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v('描述：标识BE默认选择的存储格式，可配置的参数为："'),a("strong",[e._v("ALPHA")]),e._v('", "'),a("strong",[e._v("BETA")]),e._v('"。主要起以下两个作用')])]),e._v(" "),a("ol",[a("li",[e._v("当建表的storage_format设置为Default时，通过该配置来选取BE的存储格式。")]),e._v(" "),a("li",[e._v("进行Compaction时选择BE的存储格式")])]),e._v(" "),a("ul",[a("li",[e._v("默认值：BETA")])]),e._v(" "),a("h3",{attrs:{id:"delete-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("delete_worker_count")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("执行数据删除任务的线程数")]),e._v(" "),a("h3",{attrs:{id:"disable-mem-pools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disable-mem-pools"}},[e._v("#")]),e._v(" "),a("code",[e._v("disable_mem_pools")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v("是否禁用内存缓存池，默认不禁用")]),e._v(" "),a("h3",{attrs:{id:"disable-storage-page-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disable-storage-page-cache"}},[e._v("#")]),e._v(" "),a("code",[e._v("disable_storage_page_cache")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：是否进行使用page cache进行index的缓存，该配置仅在BETA存储格式时生效")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("h3",{attrs:{id:"disk-stat-monitor-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-stat-monitor-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("disk_stat_monitor_interval")])]),e._v(" "),a("p",[e._v("默认值：5  （s）")]),e._v(" "),a("p",[e._v("磁盘状态检查时间间隔")]),e._v(" "),a("h3",{attrs:{id:"doris-cgroups"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-cgroups"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_cgroups")])]),e._v(" "),a("p",[e._v("默认值：空")]),e._v(" "),a("p",[e._v("分配给doris的cgroups")]),e._v(" "),a("h3",{attrs:{id:"doris-max-pushdown-conjuncts-return-rate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-max-pushdown-conjuncts-return-rate"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_max_pushdown_conjuncts_return_rate")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE在进行HashJoin时，会采取动态分区裁剪的方式将join条件下推到OlapScanner上。当OlapScanner扫描的数据大于32768行时，BE会进行过滤条件检查，如果该过滤条件的过滤率低于该配置，则Doris会停止使用动态分区裁剪的条件进行数据过滤。")]),e._v(" "),a("li",[e._v("默认值：90")])]),e._v(" "),a("h3",{attrs:{id:"doris-max-scan-key-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-max-scan-key-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_max_scan_key_num")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int")]),e._v(" "),a("li",[e._v("描述：用于限制一个查询请求中，scan node 节点能拆分的最大 scan key 的个数。当一个带有条件的查询请求到达 scan node 节点时，scan node 会尝试将查询条件中 key 列相关的条件拆分成多个 scan key range。之后这些 scan key range 会被分配给多个 scanner 线程进行数据扫描。较大的数值通常意味着可以使用更多的 scanner 线程来提升扫描操作的并行度。但在高并发场景下，过多的线程可能会带来更大的调度开销和系统负载，反而会降低查询响应速度。一个经验数值为 50。该配置可以单独进行会话级别的配置，具体可参阅 "),a("RouterLink",{attrs:{to:"/zh-CN/administrator-guide/variables.html"}},[e._v("变量")]),e._v(" 中 "),a("code",[e._v("max_scan_key_num")]),e._v(" 的说明。")],1),e._v(" "),a("li",[e._v("默认值：1024")])]),e._v(" "),a("p",[e._v("当在高并发场景下发下并发度无法提升时，可以尝试降低该数值并观察影响。")]),e._v(" "),a("h3",{attrs:{id:"doris-scan-range-row-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-scan-range-row-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_scan_range_row_count")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE在进行数据扫描时，会将同一个扫描范围拆分为多个ScanRange。该参数代表了每个ScanRange代表扫描数据范围。通过该参数可以限制单个OlapScanner占用io线程的时间。")]),e._v(" "),a("li",[e._v("默认值：524288")])]),e._v(" "),a("h3",{attrs:{id:"doris-scanner-queue-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-scanner-queue-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_scanner_queue_size")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：TransferThread与OlapScanner之间RowBatch的缓存队列的长度。Doris进行数据扫描时是异步进行的，OlapScanner扫描上来的Rowbatch会放入缓存队列之中，等待上层TransferThread取走。")]),e._v(" "),a("li",[e._v("默认值：1024")])]),e._v(" "),a("h3",{attrs:{id:"doris-scanner-row-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-scanner-row-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_scanner_row_num")])]),e._v(" "),a("p",[e._v("默认值：16384")]),e._v(" "),a("p",[e._v("每个扫描线程单次执行最多返回的数据行数")]),e._v(" "),a("h3",{attrs:{id:"doris-scanner-thread-pool-queue-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-scanner-thread-pool-queue-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_scanner_thread_pool_queue_size")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：Scanner线程池的队列长度。在Doris的扫描任务之中，每一个Scanner会作为一个线程task提交到线程池之中等待被调度，而提交的任务数目超过线程池队列的长度之后，后续提交的任务将阻塞直到队列之中有新的空缺。")]),e._v(" "),a("li",[e._v("默认值：102400")])]),e._v(" "),a("h3",{attrs:{id:"doris-scanner-thread-pool-thread-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doris-scanner-thread-pool-thread-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("doris_scanner_thread_pool_thread_num")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：Scanner线程池线程数目。在Doris的扫描任务之中，每一个Scanner会作为一个线程task提交到线程池之中等待被调度，该参数决定了Scanner线程池的大小。")]),e._v(" "),a("li",[e._v("默认值：48")])]),e._v(" "),a("h3",{attrs:{id:"download-low-speed-limit-kbps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#download-low-speed-limit-kbps"}},[e._v("#")]),e._v(" "),a("code",[e._v("download_low_speed_limit_kbps")])]),e._v(" "),a("p",[e._v("默认值：50 (KB/s)")]),e._v(" "),a("p",[e._v("下载最低限速")]),e._v(" "),a("h3",{attrs:{id:"download-low-speed-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#download-low-speed-time"}},[e._v("#")]),e._v(" "),a("code",[e._v("download_low_speed_time")])]),e._v(" "),a("p",[e._v("默认值：300 (s)")]),e._v(" "),a("p",[e._v("下载时间限制，默认300秒")]),e._v(" "),a("h3",{attrs:{id:"download-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#download-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("download_worker_count")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("下载线程数，默认1个")]),e._v(" "),a("h3",{attrs:{id:"drop-tablet-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drop-tablet-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("drop_tablet_worker_count")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("删除tablet的线程数")]),e._v(" "),a("h3",{attrs:{id:"enable-metric-calculator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-metric-calculator"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_metric_calculator")])]),e._v(" "),a("p",[e._v("默认值：true")]),e._v(" "),a("p",[e._v("如果设置为 true，metric calculator 将运行，收集BE相关指标信息，如果设置成false将不运行")]),e._v(" "),a("h3",{attrs:{id:"enable-partitioned-aggregation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-partitioned-aggregation"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_partitioned_aggregation")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：BE节点是否通过PartitionAggregateNode来实现聚合操作，如果false的话将会执行AggregateNode完成聚合。非特殊需求场景不建议设置为false。")]),e._v(" "),a("li",[e._v("默认值：true")])]),e._v(" "),a("h3",{attrs:{id:"enable-prefetch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-prefetch"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_prefetch")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：当使用PartitionedHashTable进行聚合和join计算时，是否进行HashBuket的预取，推荐设置为true。")]),e._v(" "),a("li",[e._v("默认值：true")])]),e._v(" "),a("h3",{attrs:{id:"enable-quadratic-probing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-quadratic-probing"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_quadratic_probing")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：当使用PartitionedHashTable时发生Hash冲突时，是否采用平方探测法来解决Hash冲突。该值为false的话，则选用线性探测发来解决Hash冲突。关于平方探测法可参考："),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Quadratic_probing",target:"_blank",rel:"noopener noreferrer"}},[e._v("quadratic_probing"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("默认值：true")])]),e._v(" "),a("h3",{attrs:{id:"enable-system-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-system-metrics"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_system_metrics")])]),e._v(" "),a("p",[e._v("默认值：true")]),e._v(" "),a("p",[e._v("用户控制打开和关闭系统指标")]),e._v(" "),a("h3",{attrs:{id:"enable-token-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-token-check"}},[e._v("#")]),e._v(" "),a("code",[e._v("enable_token_check")])]),e._v(" "),a("p",[e._v("默认值：true")]),e._v(" "),a("p",[e._v("用于向前兼容，稍后将被删除")]),e._v(" "),a("h3",{attrs:{id:"es-http-timeout-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es-http-timeout-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("es_http_timeout_ms")])]),e._v(" "),a("p",[e._v("默认值：5000 (ms)")]),e._v(" "),a("p",[e._v("通过http连接ES的超时时间，默认是5秒")]),e._v(" "),a("h3",{attrs:{id:"es-scroll-keepalive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es-scroll-keepalive"}},[e._v("#")]),e._v(" "),a("code",[e._v("es_scroll_keepalive")])]),e._v(" "),a("p",[e._v("默认值：5m")]),e._v(" "),a("p",[e._v("es scroll Keeplive保持时间，默认5分钟")]),e._v(" "),a("h3",{attrs:{id:"etl-thread-pool-queue-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etl-thread-pool-queue-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("etl_thread_pool_queue_size")])]),e._v(" "),a("p",[e._v("默认值：256")]),e._v(" "),a("p",[e._v("ETL线程池的大小")]),e._v(" "),a("h3",{attrs:{id:"etl-thread-pool-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etl-thread-pool-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("etl_thread_pool_size")])]),e._v(" "),a("h3",{attrs:{id:"exchg-node-buffer-size-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exchg-node-buffer-size-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("exchg_node_buffer_size_bytes")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：ExchangeNode节点Buffer队列的大小，单位为byte。来自Sender端发送的数据量大于ExchangeNode的Buffer大小之后，后续发送的数据将阻塞直到Buffer腾出可写入的空间。")]),e._v(" "),a("li",[e._v("默认值：10485760")])]),e._v(" "),a("h3",{attrs:{id:"file-descriptor-cache-capacity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#file-descriptor-cache-capacity"}},[e._v("#")]),e._v(" "),a("code",[e._v("file_descriptor_cache_capacity")])]),e._v(" "),a("p",[e._v("默认值：32768")]),e._v(" "),a("p",[e._v("文件句柄缓存的容量，默认缓存32768个文件句柄")]),e._v(" "),a("h3",{attrs:{id:"cache-clean-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-clean-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("cache_clean_interval")])]),e._v(" "),a("p",[e._v("默认值：1800 (s)")]),e._v(" "),a("p",[e._v("文件句柄缓存清理的间隔，用于清理长期不用的文件句柄。\n同时也是Segment Cache的清理间隔时间。")]),e._v(" "),a("h3",{attrs:{id:"flush-thread-num-per-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flush-thread-num-per-store"}},[e._v("#")]),e._v(" "),a("code",[e._v("flush_thread_num_per_store")])]),e._v(" "),a("p",[e._v("默认值：2")]),e._v(" "),a("p",[e._v("每个store用于刷新内存表的线程数")]),e._v(" "),a("h3",{attrs:{id:"force-recovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#force-recovery"}},[e._v("#")]),e._v(" "),a("code",[e._v("force_recovery")])]),e._v(" "),a("h3",{attrs:{id:"fragment-pool-queue-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fragment-pool-queue-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("fragment_pool_queue_size")])]),e._v(" "),a("p",[e._v("默认值：2048")]),e._v(" "),a("p",[e._v("单节点上能够处理的查询请求上限")]),e._v(" "),a("h3",{attrs:{id:"fragment-pool-thread-num-min"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fragment-pool-thread-num-min"}},[e._v("#")]),e._v(" "),a("code",[e._v("fragment_pool_thread_num_min")])]),e._v(" "),a("p",[e._v("默认值：64")]),e._v(" "),a("h3",{attrs:{id:"fragment-pool-thread-num-max"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fragment-pool-thread-num-max"}},[e._v("#")]),e._v(" "),a("code",[e._v("fragment_pool_thread_num_max")])]),e._v(" "),a("p",[e._v("默认值：256")]),e._v(" "),a("p",[e._v("查询线程数，默认最小启动64个线程，后续查询请求动态创建线程，最大创建256个线程")]),e._v(" "),a("h3",{attrs:{id:"heartbeat-service-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heartbeat-service-port"}},[e._v("#")]),e._v(" "),a("code",[e._v("heartbeat_service_port")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE 上心跳服务端口（thrift），用于接收来自 FE 的心跳")]),e._v(" "),a("li",[e._v("默认值：9050")])]),e._v(" "),a("h3",{attrs:{id:"heartbeat-service-thread-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heartbeat-service-thread-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("heartbeat_service_thread_count")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：执行BE上心跳服务的线程数，默认为1，不建议修改")]),e._v(" "),a("li",[e._v("默认值：1")])]),e._v(" "),a("h3",{attrs:{id:"ignore-broken-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignore-broken-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("ignore_broken_disk")])]),e._v(" "),a("p",[e._v("​\t当BE启动时，会检查"),a("code",[e._v("storage_root_path")]),e._v(" 配置下的所有路径。")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("ignore_broken_disk=true")])]),e._v(" "),a("p",[e._v("如果路径不存在或路径下无法进行读写文件(坏盘)，将忽略此路径，如果有其他可用路径则不中断启动。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("ignore_broken_disk=false")])]),e._v(" "),a("p",[e._v("如果路径不存在或路径下无法进行读写文件(坏盘)，将中断启动失败退出。")])])]),e._v(" "),a("p",[e._v("​    默认为false")]),e._v(" "),a("h3",{attrs:{id:"ignore-load-tablet-failure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignore-load-tablet-failure"}},[e._v("#")]),e._v(" "),a("code",[e._v("ignore_load_tablet_failure")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：用来决定在有tablet 加载失败的情况下是否忽略错误，继续启动be")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("p",[e._v("BE启动时，会对每个数据目录单独启动一个线程进行 tablet header 元信息的加载。默认配置下，如果某个数据目录有 tablet 加载失败，则启动进程会终止。同时会在 "),a("code",[e._v("be.INFO")]),e._v(" 日志中看到如下错误信息：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("load tablets from header failed, failed tablets size: xxx, path=xxx\n")])])]),a("p",[e._v("表示该数据目录共有多少 tablet 加载失败。同时，日志中也会有加载失败的 tablet 的具体信息。此时需要人工介入来对错误原因进行排查。排查后，通常有两种方式进行恢复：")]),e._v(" "),a("ol",[a("li",[e._v("tablet 信息不可修复，在确保其他副本正常的情况下，可以通过 "),a("code",[e._v("meta_tool")]),e._v(" 工具将错误的tablet删除。")]),e._v(" "),a("li",[e._v("将 "),a("code",[e._v("ignore_load_tablet_failure")]),e._v(" 设置为 true，则 BE 会忽略这些错误的 tablet，正常启动。")])]),e._v(" "),a("h3",{attrs:{id:"ignore-rowset-stale-unconsistent-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignore-rowset-stale-unconsistent-delete"}},[e._v("#")]),e._v(" "),a("code",[e._v("ignore_rowset_stale_unconsistent_delete")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：用来决定当删除过期的合并过的rowset后无法构成一致的版本路径时，是否仍要删除。")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("p",[e._v("合并的过期 rowset 版本路径会在半个小时后进行删除。在异常下，删除这些版本会出现构造不出查询一致路径的问题，当配置为false时，程序检查比较严格，程序会直接报错退出。\n当配置为true时，程序会正常运行，忽略这个错误。一般情况下，忽略这个错误不会对查询造成影响，仅会在fe下发了合并过的版本时出现-230错误。")]),e._v(" "),a("h3",{attrs:{id:"inc-rowset-expired-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inc-rowset-expired-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("inc_rowset_expired_sec")])]),e._v(" "),a("p",[e._v("默认值：1800 （s）")]),e._v(" "),a("p",[e._v("导入激活的数据，存储引擎保留的时间，用于增量克隆")]),e._v(" "),a("h3",{attrs:{id:"index-stream-cache-capacity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-stream-cache-capacity"}},[e._v("#")]),e._v(" "),a("code",[e._v("index_stream_cache_capacity")])]),e._v(" "),a("p",[e._v("默认值：10737418240")]),e._v(" "),a("p",[e._v("BloomFilter/Min/Max等统计信息缓存的容量")]),e._v(" "),a("h3",{attrs:{id:"kafka-broker-version-fallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-broker-version-fallback"}},[e._v("#")]),e._v(" "),a("code",[e._v("kafka_broker_version_fallback")])]),e._v(" "),a("p",[e._v("默认值：0.10.0")]),e._v(" "),a("p",[e._v("如果依赖的 kafka 版本低于routine load依赖的 kafka 客户端版本, 将使用回退版本 kafka_broker_version_fallback 设置的值，有效值为：0.9.0、0.8.2、0.8.1、0.8.0。")]),e._v(" "),a("h3",{attrs:{id:"load-data-reserve-hours"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-data-reserve-hours"}},[e._v("#")]),e._v(" "),a("code",[e._v("load_data_reserve_hours")])]),e._v(" "),a("p",[e._v("默认值：4 （小时）")]),e._v(" "),a("p",[e._v("用于mini load。mini load数据文件将在此时间后被删除")]),e._v(" "),a("h3",{attrs:{id:"load-error-log-reserve-hours"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-error-log-reserve-hours"}},[e._v("#")]),e._v(" "),a("code",[e._v("load_error_log_reserve_hours")])]),e._v(" "),a("p",[e._v("默认值：48（小时）")]),e._v(" "),a("p",[e._v("load错误日志将在此时间后删除")]),e._v(" "),a("h3",{attrs:{id:"load-process-max-memory-limit-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-process-max-memory-limit-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("load_process_max_memory_limit_bytes")])]),e._v(" "),a("p",[e._v("默认值：107374182400")]),e._v(" "),a("p",[e._v("单节点上所有的导入线程占据的内存上限，默认值：100G")]),e._v(" "),a("p",[e._v("将这些默认值设置得很大，因为我们不想在用户升级 Doris 时影响负载性能。 如有必要，用户应正确设置这些配置。")]),e._v(" "),a("h3",{attrs:{id:"load-process-max-memory-limit-percent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-process-max-memory-limit-percent"}},[e._v("#")]),e._v(" "),a("code",[e._v("load_process_max_memory_limit_percent")])]),e._v(" "),a("p",[e._v("默认值：80")]),e._v(" "),a("p",[e._v("单节点上所有的导入线程占据的内存上限比例，默认80%")]),e._v(" "),a("p",[e._v("将这些默认值设置得很大，因为我们不想在用户升级 Doris 时影响负载性能。 如有必要，用户应正确设置这些配置。")]),e._v(" "),a("h3",{attrs:{id:"log-buffer-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-buffer-level"}},[e._v("#")]),e._v(" "),a("code",[e._v("log_buffer_level")])]),e._v(" "),a("p",[e._v("默认值：空")]),e._v(" "),a("p",[e._v("日志刷盘的策略，默认保持在内存中")]),e._v(" "),a("h3",{attrs:{id:"madvise-huge-pages"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#madvise-huge-pages"}},[e._v("#")]),e._v(" "),a("code",[e._v("madvise_huge_pages")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v("是否使用linux内存大页，默认不启用")]),e._v(" "),a("h3",{attrs:{id:"make-snapshot-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#make-snapshot-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("make_snapshot_worker_count")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("制作快照的线程数")]),e._v(" "),a("h3",{attrs:{id:"max-client-cache-size-per-host"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-client-cache-size-per-host"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_client_cache_size_per_host")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("每个主机的最大客户端缓存数，BE 中有多种客户端缓存，但目前我们使用相同的缓存大小配置。 如有必要，使用不同的配置来设置不同的客户端缓存。")]),e._v(" "),a("h3",{attrs:{id:"max-compaction-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-compaction-threads"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_compaction_threads")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：Compaction线程池中线程数量的最大值。")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("h3",{attrs:{id:"max-consumer-num-per-group"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-consumer-num-per-group"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_consumer_num_per_group")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("一个数据消费者组中的最大消费者数量，用于routine load")]),e._v(" "),a("h3",{attrs:{id:"min-cumulative-compaction-num-singleton-deltas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-cumulative-compaction-num-singleton-deltas"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_cumulative_compaction_num_singleton_deltas")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("cumulative compaction策略：最小增量文件的数量")]),e._v(" "),a("h3",{attrs:{id:"max-cumulative-compaction-num-singleton-deltas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-cumulative-compaction-num-singleton-deltas"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_cumulative_compaction_num_singleton_deltas")])]),e._v(" "),a("p",[e._v("默认值：1000")]),e._v(" "),a("p",[e._v("cumulative compaction策略：最大增量文件的数量")]),e._v(" "),a("h3",{attrs:{id:"max-download-speed-kbps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-download-speed-kbps"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_download_speed_kbps")])]),e._v(" "),a("p",[e._v("默认值：50000 （kb/s）")]),e._v(" "),a("p",[e._v("最大下载速度限制")]),e._v(" "),a("h3",{attrs:{id:"max-free-io-buffers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-free-io-buffers"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_free_io_buffers")])]),e._v(" "),a("p",[e._v("默认值：128")]),e._v(" "),a("p",[e._v("对于每个 io 缓冲区大小，IoMgr 将保留的最大缓冲区数从 1024B 到 8MB 的缓冲区，最多约为 2GB 的缓冲区。")]),e._v(" "),a("h3",{attrs:{id:"max-garbage-sweep-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-garbage-sweep-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_garbage_sweep_interval")])]),e._v(" "),a("p",[e._v("默认值：3600")]),e._v(" "),a("p",[e._v("磁盘进行垃圾清理的最大间隔，默认一个小时")]),e._v(" "),a("h3",{attrs:{id:"max-memory-sink-batch-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-memory-sink-batch-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_memory_sink_batch_count")])]),e._v(" "),a("p",[e._v("默认值：20")]),e._v(" "),a("p",[e._v("最大外部扫描缓存批次计数，表示缓存max_memory_cache_batch_count * batch_size row，默认为20，batch_size的默认值为1024，表示将缓存20 * 1024行")]),e._v(" "),a("h3",{attrs:{id:"max-percentage-of-error-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-percentage-of-error-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_percentage_of_error_disk")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：存储引擎允许存在损坏硬盘的百分比，损坏硬盘超过改比例后，BE将会自动退出。")]),e._v(" "),a("li",[e._v("默认值：0")])]),e._v(" "),a("h3",{attrs:{id:"max-pushdown-conditions-per-column"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-pushdown-conditions-per-column"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_pushdown_conditions_per_column")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：int")])]),e._v(" "),a("li",[a("p",[e._v("描述：用于限制一个查询请求中，针对单个列，能够下推到存储引擎的最大条件数量。在查询计划执行的过程中，一些列上的过滤条件可以下推到存储引擎，这样可以利用存储引擎中的索引信息进行数据过滤，减少查询需要扫描的数据量。比如等值条件、IN 谓词中的条件等。这个参数在绝大多数情况下仅影响包含 IN 谓词的查询。如 "),a("code",[e._v("WHERE colA IN (1,2,3,4,...)")]),e._v("。较大的数值意味值 IN 谓词中更多的条件可以推送给存储引擎，但过多的条件可能会导致随机读的增加，某些情况下可能会降低查询效率。该配置可以单独进行会话级别的配置，具体可参阅 "),a("RouterLink",{attrs:{to:"/zh-CN/administrator-guide/variables.html"}},[e._v("变量")]),e._v(" 中 "),a("code",[e._v("max_pushdown_conditions_per_column")]),e._v(" 的说明。")],1)]),e._v(" "),a("li",[a("p",[e._v("默认值：1024")])]),e._v(" "),a("li",[a("p",[e._v("示例")]),e._v(" "),a("p",[e._v("表结构为 "),a("code",[e._v("id INT, col2 INT, col3 varchar(32), ...")]),e._v("。")]),e._v(" "),a("p",[e._v("查询请求为 "),a("code",[e._v("... WHERE id IN (v1, v2, v3, ...)")])]),e._v(" "),a("p",[e._v("如果 IN 谓词中的条件数量超过了该配置，则可以尝试增加该配置值，观察查询响应是否有所改善。")])])]),e._v(" "),a("h3",{attrs:{id:"max-runnings-transactions-per-txn-map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-runnings-transactions-per-txn-map"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_runnings_transactions_per_txn_map")])]),e._v(" "),a("p",[e._v("默认值：100")]),e._v(" "),a("p",[e._v("txn 管理器中每个 txn_partition_map 的最大 txns 数，这是一种自我保护，以避免在管理器中保存过多的 txns")]),e._v(" "),a("h3",{attrs:{id:"max-send-batch-parallelism-per-job"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-send-batch-parallelism-per-job"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_send_batch_parallelism_per_job")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int")]),e._v(" "),a("li",[e._v("描述：OlapTableSink 发送批处理数据的最大并行度，用户为 "),a("code",[e._v("send_batch_parallelism")]),e._v(" 设置的值不允许超过 "),a("code",[e._v("max_send_batch_parallelism_per_job")]),e._v(" ，如果超过， "),a("code",[e._v("send_batch_parallelism")]),e._v(" 将被设置为 "),a("code",[e._v("max_send_batch_parallelism_per_job")]),e._v(" 的值。")]),e._v(" "),a("li",[e._v("默认值：1")])]),e._v(" "),a("h3",{attrs:{id:"max-tablet-num-per-shard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-tablet-num-per-shard"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_tablet_num_per_shard")])]),e._v(" "),a("p",[e._v("默认：1024")]),e._v(" "),a("p",[e._v("每个shard的tablet数目，用于划分tablet，防止单个目录下tablet子目录过多")]),e._v(" "),a("h3",{attrs:{id:"max-tablet-version-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-tablet-version-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_tablet_version_num")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int")]),e._v(" "),a("li",[e._v("描述：限制单个 tablet 最大 version 的数量。用于防止导入过于频繁，或 compaction 不及时导致的大量 version 堆积问题。当超过限制后，导入任务将被拒绝。")]),e._v(" "),a("li",[e._v("默认值：500")])]),e._v(" "),a("h3",{attrs:{id:"mem-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mem-limit"}},[e._v("#")]),e._v(" "),a("code",[e._v("mem_limit")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("描述：限制BE进程使用服务器最大内存百分比。用于防止BE内存挤占太多的机器内存，该参数必须大于0，当百分大于100%之后，该值会默认为100%。")]),e._v(" "),a("li",[e._v("默认值：80%")])]),e._v(" "),a("h3",{attrs:{id:"memory-limitation-per-thread-for-schema-change"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-limitation-per-thread-for-schema-change"}},[e._v("#")]),e._v(" "),a("code",[e._v("memory_limitation_per_thread_for_schema_change")])]),e._v(" "),a("p",[e._v("默认值：2 （GB）")]),e._v(" "),a("p",[e._v("单个schema change任务允许占用的最大内存")]),e._v(" "),a("h3",{attrs:{id:"memory-maintenance-sleep-time-s"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-maintenance-sleep-time-s"}},[e._v("#")]),e._v(" "),a("code",[e._v("memory_maintenance_sleep_time_s")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("内存维护迭代之间的休眠时间（以秒为单位）")]),e._v(" "),a("h3",{attrs:{id:"memory-max-alignment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-max-alignment"}},[e._v("#")]),e._v(" "),a("code",[e._v("memory_max_alignment")])]),e._v(" "),a("p",[e._v("默认值：16")]),e._v(" "),a("p",[e._v("最大校对内存")]),e._v(" "),a("h3",{attrs:{id:"read-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("read_size")])]),e._v(" "),a("p",[e._v("默认值：8388608")]),e._v(" "),a("p",[e._v("读取大小是发送到 os 的读取大小。 在延迟和整个过程之间进行权衡，试图让磁盘保持忙碌但不引入寻道。 对于 8 MB 读取，随机 io 和顺序 io 的性能相似")]),e._v(" "),a("h3",{attrs:{id:"min-buffer-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-buffer-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_buffer_size")])]),e._v(" "),a("p",[e._v("默认值：1024")]),e._v(" "),a("p",[e._v("最小读取缓冲区大小（以字节为单位）")]),e._v(" "),a("h3",{attrs:{id:"min-compaction-failure-interval-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-compaction-failure-interval-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_compaction_failure_interval_sec")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：在 cumulative compaction 过程中，当选中的 tablet 没能成功的进行版本合并，则会等待一段时间后才会再次有可能被选中。等待的这段时间就是这个配置的值。")]),e._v(" "),a("li",[e._v("默认值：600")]),e._v(" "),a("li",[e._v("单位：秒")])]),e._v(" "),a("h3",{attrs:{id:"min-compaction-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-compaction-threads"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_compaction_threads")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：Compaction线程池中线程数量的最小值。")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("h3",{attrs:{id:"min-file-descriptor-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-file-descriptor-number"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_file_descriptor_number")])]),e._v(" "),a("p",[e._v("默认值：60000")]),e._v(" "),a("p",[e._v("BE进程的文件句柄limit要求的下限")]),e._v(" "),a("h3",{attrs:{id:"min-garbage-sweep-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-garbage-sweep-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_garbage_sweep_interval")])]),e._v(" "),a("p",[e._v("默认值：180")]),e._v(" "),a("p",[e._v("磁盘进行垃圾清理的最小间隔，时间秒")]),e._v(" "),a("h3",{attrs:{id:"mmap-buffers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mmap-buffers"}},[e._v("#")]),e._v(" "),a("code",[e._v("mmap_buffers")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v("是否使用mmap分配内存，默认不使用")]),e._v(" "),a("h3",{attrs:{id:"num-cores"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#num-cores"}},[e._v("#")]),e._v(" "),a("code",[e._v("num_cores")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE可以使用CPU的核数。当该值为0时，BE将从/proc/cpuinfo之中获取本机的CPU核数。")]),e._v(" "),a("li",[e._v("默认值：0")])]),e._v(" "),a("h3",{attrs:{id:"num-disks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#num-disks"}},[e._v("#")]),e._v(" "),a("code",[e._v("num_disks")])]),e._v(" "),a("p",[e._v("默认值：0")]),e._v(" "),a("p",[e._v("控制机器上的磁盘数量。 如果为 0，则来自系统设置。")]),e._v(" "),a("h3",{attrs:{id:"num-threads-per-core"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#num-threads-per-core"}},[e._v("#")]),e._v(" "),a("code",[e._v("num_threads_per_core")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("控制每个内核运行工作的线程数。 通常选择 2 倍或 3 倍的内核数量。 这使核心保持忙碌而不会导致过度抖动")]),e._v(" "),a("h3",{attrs:{id:"num-threads-per-disk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#num-threads-per-disk"}},[e._v("#")]),e._v(" "),a("code",[e._v("num_threads_per_disk")])]),e._v(" "),a("p",[e._v("默认值：0")]),e._v(" "),a("p",[e._v("每个磁盘的最大线程数也是每个磁盘的最大队列深度")]),e._v(" "),a("h3",{attrs:{id:"number-tablet-writer-threads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-tablet-writer-threads"}},[e._v("#")]),e._v(" "),a("code",[e._v("number_tablet_writer_threads")])]),e._v(" "),a("p",[e._v("默认值：16")]),e._v(" "),a("p",[e._v("tablet写线程数")]),e._v(" "),a("h3",{attrs:{id:"path-gc-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-gc-check"}},[e._v("#")]),e._v(" "),a("code",[e._v("path_gc_check")])]),e._v(" "),a("p",[e._v("默认值：true")]),e._v(" "),a("p",[e._v("是否启用回收扫描数据线程检查，默认启用")]),e._v(" "),a("h3",{attrs:{id:"path-gc-check-interval-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-gc-check-interval-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("path_gc_check_interval_second")])]),e._v(" "),a("p",[e._v("默认值：86400")]),e._v(" "),a("p",[e._v("回收扫描数据线程检查时间间隔，单位秒")]),e._v(" "),a("h3",{attrs:{id:"path-gc-check-step"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-gc-check-step"}},[e._v("#")]),e._v(" "),a("code",[e._v("path_gc_check_step")])]),e._v(" "),a("p",[e._v("默认值：1000")]),e._v(" "),a("h3",{attrs:{id:"path-gc-check-step-interval-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-gc-check-step-interval-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("path_gc_check_step_interval_ms")])]),e._v(" "),a("p",[e._v("默认值：10 (ms)")]),e._v(" "),a("h3",{attrs:{id:"path-scan-interval-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-scan-interval-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("path_scan_interval_second")])]),e._v(" "),a("p",[e._v("默认值：86400")]),e._v(" "),a("h3",{attrs:{id:"pending-data-expire-time-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pending-data-expire-time-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("pending_data_expire_time_sec")])]),e._v(" "),a("p",[e._v("默认值：1800")]),e._v(" "),a("p",[e._v("存储引擎保留的未生效数据的最大时长，默认单位：秒")]),e._v(" "),a("h3",{attrs:{id:"periodic-counter-update-period-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#periodic-counter-update-period-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("periodic_counter_update_period_ms")])]),e._v(" "),a("p",[e._v("默认值：500")]),e._v(" "),a("p",[e._v("更新速率计数器和采样计数器的周期，默认单位：毫秒")]),e._v(" "),a("h3",{attrs:{id:"plugin-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin-path"}},[e._v("#")]),e._v(" "),a("code",[e._v("plugin_path")])]),e._v(" "),a("p",[e._v("默认值：${DORIS_HOME}/plugin")]),e._v(" "),a("p",[e._v("插件路径")]),e._v(" "),a("h3",{attrs:{id:"port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#port"}},[e._v("#")]),e._v(" "),a("code",[e._v("port")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE单测时使用的端口，在实际环境之中无意义，可忽略。")]),e._v(" "),a("li",[e._v("默认值：20001")])]),e._v(" "),a("h3",{attrs:{id:"pprof-profile-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pprof-profile-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("pprof_profile_dir")])]),e._v(" "),a("p",[e._v("默认值：${DORIS_HOME}/log")]),e._v(" "),a("p",[e._v("pprof profile保存目录")]),e._v(" "),a("h3",{attrs:{id:"priority-networks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority-networks"}},[e._v("#")]),e._v(" "),a("code",[e._v("priority_networks")])]),e._v(" "),a("p",[e._v("默认值：空")]),e._v(" "),a("p",[e._v("为那些有很多 ip 的服务器声明一个选择策略。 请注意，最多应该有一个 ip 与此列表匹配。 这是一个以分号分隔格式的列表，用 CIDR 表示法，例如 10.10.10.0/24 ， 如果没有匹配这条规则的ip，会随机选择一个。")]),e._v(" "),a("h3",{attrs:{id:"priority-queue-remaining-tasks-increased-frequency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priority-queue-remaining-tasks-increased-frequency"}},[e._v("#")]),e._v(" "),a("code",[e._v("priority_queue_remaining_tasks_increased_frequency")])]),e._v(" "),a("p",[e._v("默认值：512")]),e._v(" "),a("p",[e._v("the increased frequency of priority for remaining tasks in BlockingPriorityQueue")]),e._v(" "),a("h3",{attrs:{id:"publish-version-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#publish-version-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("publish_version_worker_count")])]),e._v(" "),a("p",[e._v("默认值：8")]),e._v(" "),a("p",[e._v("生效版本的线程数")]),e._v(" "),a("h3",{attrs:{id:"pull-load-task-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-load-task-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("pull_load_task_dir")])]),e._v(" "),a("p",[e._v("默认值：${DORIS_HOME}/var/pull_load")]),e._v(" "),a("p",[e._v("拉取laod任务的目录")]),e._v(" "),a("h3",{attrs:{id:"push-worker-count-high-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-worker-count-high-priority"}},[e._v("#")]),e._v(" "),a("code",[e._v("push_worker_count_high_priority")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("导入线程数，用于处理HIGH优先级任务")]),e._v(" "),a("h3",{attrs:{id:"push-worker-count-normal-priority"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-worker-count-normal-priority"}},[e._v("#")]),e._v(" "),a("code",[e._v("push_worker_count_normal_priority")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("导入线程数，用于处理NORMAL优先级任务")]),e._v(" "),a("h3",{attrs:{id:"push-write-mbytes-per-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-write-mbytes-per-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("push_write_mbytes_per_sec")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：导入数据速度控制，默认最快每秒10MB。适用于所有的导入方式。")]),e._v(" "),a("li",[e._v("单位：MB")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("h3",{attrs:{id:"query-scratch-dirs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-scratch-dirs"}},[e._v("#")]),e._v(" "),a("code",[e._v("query_scratch_dirs")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("描述：BE进行数据落盘时选取的目录来存放临时数据，与存储路径配置类似，多目录之间用;分隔。")]),e._v(" "),a("li",[e._v("默认值：${DORIS_HOME}")])]),e._v(" "),a("h3",{attrs:{id:"release-snapshot-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#release-snapshot-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("release_snapshot_worker_count")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("释放快照的线程数")]),e._v(" "),a("h3",{attrs:{id:"report-disk-state-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#report-disk-state-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("report_disk_state_interval_seconds")])]),e._v(" "),a("p",[e._v("默认值：60")]),e._v(" "),a("p",[e._v("代理向 FE 报告磁盘状态的间隔时间（秒）")]),e._v(" "),a("h3",{attrs:{id:"report-tablet-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#report-tablet-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("report_tablet_interval_seconds")])]),e._v(" "),a("p",[e._v("默认值：60")]),e._v(" "),a("p",[e._v("代理向 FE 报告 olap 表的间隔时间（秒）")]),e._v(" "),a("h3",{attrs:{id:"report-task-interval-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#report-task-interval-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("report_task_interval_seconds")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("代理向 FE 报告任务签名的间隔时间（秒）")]),e._v(" "),a("h3",{attrs:{id:"result-buffer-cancelled-interval-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#result-buffer-cancelled-interval-time"}},[e._v("#")]),e._v(" "),a("code",[e._v("result_buffer_cancelled_interval_time")])]),e._v(" "),a("p",[e._v("默认值：300")]),e._v(" "),a("p",[e._v("结果缓冲区取消时间（单位：秒）")]),e._v(" "),a("h3",{attrs:{id:"routine-load-thread-pool-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routine-load-thread-pool-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("routine_load_thread_pool_size")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("routine load任务的线程池大小。 这应该大于 FE 配置 'max_concurrent_task_num_per_be'（默认 5）")]),e._v(" "),a("h3",{attrs:{id:"row-nums-check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#row-nums-check"}},[e._v("#")]),e._v(" "),a("code",[e._v("row_nums_check")])]),e._v(" "),a("p",[e._v("默认值：true")]),e._v(" "),a("p",[e._v("检查 BE/CE 和schema更改的行号。 true 是打开的，false 是关闭的。")]),e._v(" "),a("h3",{attrs:{id:"row-step-for-compaction-merge-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#row-step-for-compaction-merge-log"}},[e._v("#")]),e._v(" "),a("code",[e._v("row_step_for_compaction_merge_log")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：Compaction执行过程中，每次合并row_step_for_compaction_merge_log行数据会打印一条LOG。如果该参数被设置为0，表示merge过程中不需要打印LOG。")]),e._v(" "),a("li",[e._v("默认值： 0")]),e._v(" "),a("li",[e._v("可动态修改：是")])]),e._v(" "),a("h3",{attrs:{id:"scan-context-gc-interval-min"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scan-context-gc-interval-min"}},[e._v("#")]),e._v(" "),a("code",[e._v("scan_context_gc_interval_min")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("此配置用于上下文gc线程调度周期 ， 注意：单位为分钟，默认为 5 分钟")]),e._v(" "),a("h3",{attrs:{id:"send-batch-thread-pool-thread-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-batch-thread-pool-thread-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("send_batch_thread_pool_thread_num")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：SendBatch线程池线程数目。在NodeChannel的发送数据任务之中，每一个NodeChannel的SendBatch操作会作为一个线程task提交到线程池之中等待被调度，该参数决定了SendBatch线程池的大小。")]),e._v(" "),a("li",[e._v("默认值：256")])]),e._v(" "),a("h3",{attrs:{id:"send-batch-thread-pool-queue-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#send-batch-thread-pool-queue-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("send_batch_thread_pool_queue_size")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：SendBatch线程池的队列长度。在NodeChannel的发送数据任务之中，每一个NodeChannel的SendBatch操作会作为一个线程task提交到线程池之中等待被调度，而提交的任务数目超过线程池队列的长度之后，后续提交的任务将阻塞直到队列之中有新的空缺。")]),e._v(" "),a("li",[e._v("默认值：102400")])]),e._v(" "),a("h3",{attrs:{id:"serialize-batch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serialize-batch"}},[e._v("#")]),e._v(" "),a("code",[e._v("serialize_batch")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v("BE之间rpc通信是否序列化RowBatch，用于查询层之间的数据传输")]),e._v(" "),a("h3",{attrs:{id:"sleep-one-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleep-one-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("sleep_one_second")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：全局变量，用于BE线程休眠1秒，不应该被修改")]),e._v(" "),a("li",[e._v("默认值：1")])]),e._v(" "),a("h3",{attrs:{id:"small-file-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#small-file-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("small_file_dir")])]),e._v(" "),a("p",[e._v("默认值：${DORIS_HOME}/lib/small_file/")]),e._v(" "),a("p",[e._v("用于保存 SmallFileMgr 下载的文件的目录")]),e._v(" "),a("h3",{attrs:{id:"snapshot-expire-time-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-expire-time-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("snapshot_expire_time_sec")])]),e._v(" "),a("p",[e._v("默认值：172800")]),e._v(" "),a("p",[e._v("快照文件清理的间隔，默认值：48小时")]),e._v(" "),a("h3",{attrs:{id:"status-report-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#status-report-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("status_report_interval")])]),e._v(" "),a("p",[e._v("默认值：5")]),e._v(" "),a("p",[e._v("配置文件报告之间的间隔；单位：秒")]),e._v(" "),a("h3",{attrs:{id:"storage-flood-stage-left-capacity-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-flood-stage-left-capacity-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_flood_stage_left_capacity_bytes")])]),e._v(" "),a("p",[e._v("默认值：1073741824")]),e._v(" "),a("p",[e._v("数据目录应该剩下的最小存储空间，默认1G")]),e._v(" "),a("h3",{attrs:{id:"storage-flood-stage-usage-percent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-flood-stage-usage-percent"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_flood_stage_usage_percent")])]),e._v(" "),a("p",[e._v("默认值：95 （95%）")]),e._v(" "),a("p",[e._v("storage_flood_stage_usage_percent和storage_flood_stage_left_capacity_bytes两个配置限制了数据目录的磁盘容量的最大使用。 如果这两个阈值都达到，则无法将更多数据写入该数据目录。 数据目录的最大已用容量百分比")]),e._v(" "),a("h3",{attrs:{id:"storage-medium-migrate-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-medium-migrate-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_medium_migrate_count")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("要克隆的线程数")]),e._v(" "),a("h3",{attrs:{id:"storage-page-cache-limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-page-cache-limit"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_page_cache_limit")])]),e._v(" "),a("p",[e._v("默认值：20%")]),e._v(" "),a("p",[e._v("缓存存储页大小")]),e._v(" "),a("h3",{attrs:{id:"index-page-cache-percentage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-page-cache-percentage"}},[e._v("#")]),e._v(" "),a("code",[e._v("index_page_cache_percentage")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：索引页缓存占总页面缓存的百分比，取值为[0, 100]。")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("h3",{attrs:{id:"storage-root-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-root-path"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_root_path")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("类型：string")])]),e._v(" "),a("li",[a("p",[e._v("描述：BE数据存储的目录,多目录之间用英文状态的分号"),a("code",[e._v(";")]),e._v("分隔。可以通过路径区别存储目录的介质，HDD或SSD。可以添加容量限制在每个路径的末尾，通过英文状态逗号"),a("code",[e._v(",")]),e._v("隔开。")]),e._v(" "),a("p",[e._v("示例1如下：")]),e._v(" "),a("p",[a("strong",[e._v("注意：如果是SSD磁盘要在目录后面加上"),a("code",[e._v(".SSD")]),e._v(",HDD磁盘在目录后面加"),a("code",[e._v(".HDD")])])]),e._v(" "),a("p",[a("code",[e._v("storage_root_path=/home/disk1/doris.HDD,50;/home/disk2/doris.SSD,10;/home/disk2/doris")])]),e._v(" "),a("ul",[a("li",[e._v("/home/disk1/doris.HDD,50，表示存储限制为50GB，HDD;")]),e._v(" "),a("li",[e._v("/home/disk2/doris.SSD,10，存储限制为10GB，SSD；")]),e._v(" "),a("li",[e._v("/home/disk2/doris，存储限制为磁盘最大容量，默认为HDD")])]),e._v(" "),a("p",[e._v("示例2如下：")]),e._v(" "),a("p",[a("strong",[e._v("注意：不论HHD磁盘目录还是SSD磁盘目录，文件夹目录名称都无需添加后缀，storage_root_path参数里指定medium即可")])]),e._v(" "),a("p",[a("code",[e._v("storage_root_path=/home/disk1/doris,medium:hdd,capacity:50;/home/disk2/doris,medium:ssd,capacity:50")])]),e._v(" "),a("p",[a("strong",[e._v("说明")])]),e._v(" "),a("ul",[a("li",[e._v("/home/disk1/doris,medium:hdd,capacity:10，表示存储限制为10GB, HHD;")]),e._v(" "),a("li",[e._v("/home/disk2/doris,medium:ssd,capacity:50，表示存储限制为50GB, SSD;")])])]),e._v(" "),a("li",[a("p",[e._v("默认值：${DORIS_HOME}")])])]),e._v(" "),a("h3",{attrs:{id:"storage-strict-check-incompatible-old-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#storage-strict-check-incompatible-old-format"}},[e._v("#")]),e._v(" "),a("code",[e._v("storage_strict_check_incompatible_old_format")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：用来检查不兼容的旧版本格式时是否使用严格的验证方式")]),e._v(" "),a("li",[e._v("默认值： true")]),e._v(" "),a("li",[e._v("可动态修改：否")])]),e._v(" "),a("p",[e._v("配置用来检查不兼容的旧版本格式时是否使用严格的验证方式，当含有旧版本的 hdr 格式时，使用严谨的方式时，程序会\n打出 fatal log 并且退出运行；否则，程序仅打印 warn log.")]),e._v(" "),a("h3",{attrs:{id:"streaming-load-max-mb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#streaming-load-max-mb"}},[e._v("#")]),e._v(" "),a("code",[e._v("streaming_load_max_mb")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用于限制数据格式为 csv 的一次 Stream load 导入中，允许的最大数据量。单位 MB。")]),e._v(" "),a("li",[e._v("默认值： 10240")]),e._v(" "),a("li",[e._v("可动态修改：是")])]),e._v(" "),a("p",[e._v("Stream Load 一般适用于导入几个GB以内的数据，不适合导入过大的数据。")]),e._v(" "),a("h3",{attrs:{id:"streaming-load-json-max-mb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#streaming-load-json-max-mb"}},[e._v("#")]),e._v(" "),a("code",[e._v("streaming_load_json_max_mb")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用于限制数据格式为 json 的一次 Stream load 导入中，允许的最大数据量。单位 MB。")]),e._v(" "),a("li",[e._v("默认值： 100")]),e._v(" "),a("li",[e._v("可动态修改：是")])]),e._v(" "),a("p",[e._v("一些数据格式，如 JSON，无法进行拆分处理，必须读取全部数据到内存后才能开始解析，因此，这个值用于限制此类格式数据单次导入最大数据量。")]),e._v(" "),a("h3",{attrs:{id:"streaming-load-rpc-max-alive-time-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#streaming-load-rpc-max-alive-time-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("streaming_load_rpc_max_alive_time_sec")])]),e._v(" "),a("p",[e._v("默认值：1200")]),e._v(" "),a("p",[e._v("TabletsChannel 的存活时间。如果此时通道没有收到任何数据， 通道将被删除。")]),e._v(" "),a("h3",{attrs:{id:"sync-tablet-meta"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-tablet-meta"}},[e._v("#")]),e._v(" "),a("code",[e._v("sync_tablet_meta")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v("存储引擎是否开sync保留到磁盘上")]),e._v(" "),a("h3",{attrs:{id:"sys-log-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_dir")])]),e._v(" "),a("ul",[a("li",[e._v("类型：string")]),e._v(" "),a("li",[e._v("描述：BE日志数据的存储目录")]),e._v(" "),a("li",[e._v("默认值：${DORIS_HOME}/log")])]),e._v(" "),a("h3",{attrs:{id:"sys-log-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-level"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_level")])]),e._v(" "),a("p",[e._v("默认值：INFO")]),e._v(" "),a("p",[e._v("日志级别，INFO < WARNING < ERROR < FATAL")]),e._v(" "),a("h3",{attrs:{id:"sys-log-roll-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-roll-mode"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_roll_mode")])]),e._v(" "),a("p",[e._v("默认值：SIZE-MB-1024")]),e._v(" "),a("p",[e._v("日志拆分的大小，每1G拆分一个日志文件")]),e._v(" "),a("h3",{attrs:{id:"sys-log-roll-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-roll-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_roll_num")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("日志文件保留的数目")]),e._v(" "),a("h3",{attrs:{id:"sys-log-verbose-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-verbose-level"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_verbose_level")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("日志显示的级别，用于控制代码中VLOG开头的日志输出")]),e._v(" "),a("h3",{attrs:{id:"sys-log-verbose-modules"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sys-log-verbose-modules"}},[e._v("#")]),e._v(" "),a("code",[e._v("sys_log_verbose_modules")])]),e._v(" "),a("p",[e._v("默认值：空")]),e._v(" "),a("p",[e._v("日志打印的模块，写olap就只打印olap模块下的日志")]),e._v(" "),a("h3",{attrs:{id:"tablet-map-shard-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-map-shard-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_map_shard_size")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("tablet_map_lock 分片大小，值为 2^n, n=0,1,2,3,4 ，这是为了更好地管理tablet")]),e._v(" "),a("h3",{attrs:{id:"tablet-meta-checkpoint-min-interval-secs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-meta-checkpoint-min-interval-secs"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_meta_checkpoint_min_interval_secs")])]),e._v(" "),a("p",[e._v("默认值：600 （秒）")]),e._v(" "),a("p",[e._v("TabletMeta Checkpoint线程轮询的时间间隔")]),e._v(" "),a("h3",{attrs:{id:"tablet-meta-checkpoint-min-new-rowsets-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-meta-checkpoint-min-new-rowsets-num"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_meta_checkpoint_min_new_rowsets_num")])]),e._v(" "),a("p",[e._v("默认值：10")]),e._v(" "),a("p",[e._v("TabletMeta Checkpoint的最小Rowset数目")]),e._v(" "),a("h3",{attrs:{id:"tablet-scan-frequency-time-node-interval-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-scan-frequency-time-node-interval-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_scan_frequency_time_node_interval_second")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用来表示记录 metric 'query_scan_count' 的时间间隔。为了计算当前一段时间的tablet的scan频率，需要每隔一段时间记录一次 metric 'query_scan_count'。")]),e._v(" "),a("li",[e._v("默认值：300")])]),e._v(" "),a("h3",{attrs:{id:"tablet-stat-cache-update-interval-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-stat-cache-update-interval-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_stat_cache_update_interval_second")])]),e._v(" "),a("p",[e._v("默认值：300")]),e._v(" "),a("p",[e._v("tablet状态缓存的更新间隔，单位：秒")]),e._v(" "),a("h3",{attrs:{id:"tablet-rowset-stale-sweep-time-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-rowset-stale-sweep-time-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_rowset_stale_sweep_time_sec")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用来表示清理合并版本的过期时间，当当前时间 now() 减去一个合并的版本路径中rowset最近创建创建时间大于tablet_rowset_stale_sweep_time_sec时，对当前路径进行清理，删除这些合并过的rowset, 单位为s。")]),e._v(" "),a("li",[e._v("默认值：1800")])]),e._v(" "),a("p",[e._v("当写入过于频繁，磁盘空间不足时，可以配置较少这个时间。不过这个时间过短小于5分钟时，可能会引发fe查询不到已经合并过的版本，引发查询-230错误。")]),e._v(" "),a("h3",{attrs:{id:"tablet-writer-open-rpc-timeout-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-writer-open-rpc-timeout-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_writer_open_rpc_timeout_sec")])]),e._v(" "),a("p",[e._v("默认值：60")]),e._v(" "),a("p",[e._v("在远程BE 中打开tablet writer的 rpc 超时。 操作时间短，可设置短超时时间")]),e._v(" "),a("h3",{attrs:{id:"tablet-writer-ignore-eovercrowded"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tablet-writer-ignore-eovercrowded"}},[e._v("#")]),e._v(" "),a("code",[e._v("tablet_writer_ignore_eovercrowded")])]),e._v(" "),a("ul",[a("li",[e._v("类型：bool")]),e._v(" "),a("li",[e._v("描述：写入时可忽略brpc的'[E1011]The server is overcrowded'错误。")]),e._v(" "),a("li",[e._v("默认值：false")])]),e._v(" "),a("p",[e._v("当遇到'[E1011]The server is overcrowded'的错误时，可以调整配置项"),a("code",[e._v("brpc_socket_max_unwritten_bytes")]),e._v("，但这个配置项不能动态调整。所以可通过设置此项为"),a("code",[e._v("true")]),e._v("来临时避免写失败。注意，此配置项只影响写流程，其他的rpc请求依旧会检查是否overcrowded。")]),e._v(" "),a("h3",{attrs:{id:"tc-free-memory-rate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tc-free-memory-rate"}},[e._v("#")]),e._v(" "),a("code",[e._v("tc_free_memory_rate")])]),e._v(" "),a("p",[e._v("默认值：20   (%)")]),e._v(" "),a("p",[e._v("可用内存，取值范围：[0-100]")]),e._v(" "),a("h3",{attrs:{id:"tc-max-total-thread-cache-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tc-max-total-thread-cache-bytes"}},[e._v("#")]),e._v(" "),a("code",[e._v("tc_max_total_thread_cache_bytes")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用来限制 tcmalloc 中总的线程缓存大小。这个限制不是硬限，因此实际线程缓存使用可能超过这个限制。具体可参阅 "),a("a",{attrs:{href:"https://gperftools.github.io/gperftools/tcmalloc.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("TCMALLOC_MAX_TOTAL_THREAD_CACHE_BYTES"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("默认值： 1073741824")])]),e._v(" "),a("p",[e._v("如果发现系统在高压力场景下，通过 BE 线程堆栈发现大量线程处于 tcmalloc 的锁竞争阶段，如大量的 "),a("code",[e._v("SpinLock")]),e._v(" 相关堆栈，则可以尝试增大该参数来提升系统性能。"),a("a",{attrs:{href:"https://github.com/gperftools/gperftools/issues/1111",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"tc-use-memory-min"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tc-use-memory-min"}},[e._v("#")]),e._v(" "),a("code",[e._v("tc_use_memory_min")])]),e._v(" "),a("p",[e._v("默认值：10737418240")]),e._v(" "),a("p",[e._v("TCmalloc 的最小内存，当使用的内存小于这个时，不返回给操作系统")]),e._v(" "),a("h3",{attrs:{id:"thrift-client-retry-interval-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrift-client-retry-interval-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("thrift_client_retry_interval_ms")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v("描述：用来为be的thrift客户端设置重试间隔, 避免fe的thrift server发生雪崩问题，单位为ms。")]),e._v(" "),a("li",[e._v("默认值：1000")])]),e._v(" "),a("h3",{attrs:{id:"thrift-connect-timeout-seconds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrift-connect-timeout-seconds"}},[e._v("#")]),e._v(" "),a("code",[e._v("thrift_connect_timeout_seconds")])]),e._v(" "),a("p",[e._v("默认值：3")]),e._v(" "),a("p",[e._v("默认thrift客户端连接超时时间（单位：秒）")]),e._v(" "),a("h3",{attrs:{id:"thrift-rpc-timeout-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrift-rpc-timeout-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("thrift_rpc_timeout_ms")])]),e._v(" "),a("p",[e._v("默认值：5000")]),e._v(" "),a("p",[e._v("thrift默认超时时间，默认：5秒")]),e._v(" "),a("h3",{attrs:{id:"thrift-server-type-of-fe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thrift-server-type-of-fe"}},[e._v("#")]),e._v(" "),a("code",[e._v("thrift_server_type_of_fe")])]),e._v(" "),a("p",[e._v("该配置表示FE的Thrift服务使用的服务模型, 类型为string, 大小写不敏感,该参数需要和fe的thrift_server_type参数的设置保持一致。目前该参数的取值有两个,"),a("code",[e._v("THREADED")]),e._v("和"),a("code",[e._v("THREAD_POOL")]),e._v("。")]),e._v(" "),a("p",[e._v("若该参数为"),a("code",[e._v("THREADED")]),e._v(", 该模型为非阻塞式I/O模型，")]),e._v(" "),a("p",[e._v("若该参数为"),a("code",[e._v("THREAD_POOL")]),e._v(", 该模型为阻塞式I/O模型。")]),e._v(" "),a("h3",{attrs:{id:"total-permits-for-compaction-score"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#total-permits-for-compaction-score"}},[e._v("#")]),e._v(" "),a("code",[e._v("total_permits_for_compaction_score")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int64")]),e._v(" "),a("li",[e._v('描述：被所有的compaction任务所能持有的 "permits" 上限，用来限制compaction占用的内存。')]),e._v(" "),a("li",[e._v("默认值：10000")]),e._v(" "),a("li",[e._v("可动态修改：是")])]),e._v(" "),a("h3",{attrs:{id:"trash-file-expire-time-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trash-file-expire-time-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("trash_file_expire_time_sec")])]),e._v(" "),a("p",[e._v("默认值：259200")]),e._v(" "),a("p",[e._v("回收站清理的间隔，72个小时，当磁盘空间不足时，trash下的文件保存期可不遵守这个参数")]),e._v(" "),a("h3",{attrs:{id:"txn-commit-rpc-timeout-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#txn-commit-rpc-timeout-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("txn_commit_rpc_timeout_ms")])]),e._v(" "),a("p",[e._v("默认值：10000")]),e._v(" "),a("p",[e._v("txn 提交 rpc 超时，默认10秒")]),e._v(" "),a("h3",{attrs:{id:"txn-map-shard-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#txn-map-shard-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("txn_map_shard_size")])]),e._v(" "),a("p",[e._v("默认值：128")]),e._v(" "),a("p",[e._v("txn_map_lock 分片大小，取值为2^n，n=0,1,2,3,4。这是一项增强功能，可提高管理 txn 的性能")]),e._v(" "),a("h3",{attrs:{id:"txn-shard-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#txn-shard-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("txn_shard_size")])]),e._v(" "),a("p",[e._v("默认值：1024")]),e._v(" "),a("p",[e._v("txn_lock 分片大小，取值为2^n，n=0,1,2,3,4，  这是一项增强功能，可提高提交和发布 txn 的性能")]),e._v(" "),a("h3",{attrs:{id:"unused-rowset-monitor-interval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unused-rowset-monitor-interval"}},[e._v("#")]),e._v(" "),a("code",[e._v("unused_rowset_monitor_interval")])]),e._v(" "),a("p",[e._v("默认值：30")]),e._v(" "),a("p",[e._v("清理过期Rowset的时间间隔，单位：秒")]),e._v(" "),a("h3",{attrs:{id:"upload-worker-count"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upload-worker-count"}},[e._v("#")]),e._v(" "),a("code",[e._v("upload_worker_count")])]),e._v(" "),a("p",[e._v("默认值：1")]),e._v(" "),a("p",[e._v("上传文件最大线程数")]),e._v(" "),a("h3",{attrs:{id:"use-mmap-allocate-chunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-mmap-allocate-chunk"}},[e._v("#")]),e._v(" "),a("code",[e._v("use_mmap_allocate_chunk")])]),e._v(" "),a("p",[e._v("默认值：false")]),e._v(" "),a("p",[e._v('是否使用 mmap 分配块。 如果启用此功能，最好增加 vm.max_map_count 的值，其默认值为 65530。您可以通过“sysctl -w vm.max_map_count=262144”或“echo 262144 > /proc/sys/vm/”以 root 身份进行操作 max_map_count" ，当这个设置为true时，你必须将chunk_reserved_bytes_limit设置为一个相对较大的数字，否则性能非常非常糟糕。')]),e._v(" "),a("h3",{attrs:{id:"user-function-dir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#user-function-dir"}},[e._v("#")]),e._v(" "),a("code",[e._v("user_function_dir")])]),e._v(" "),a("p",[e._v("默认值：${DORIS_HOME}/lib/udf")]),e._v(" "),a("p",[e._v("udf函数目录")]),e._v(" "),a("h3",{attrs:{id:"webserver-num-workers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webserver-num-workers"}},[e._v("#")]),e._v(" "),a("code",[e._v("webserver_num_workers")])]),e._v(" "),a("p",[e._v("默认值：48")]),e._v(" "),a("p",[e._v("webserver默认工作线程数")]),e._v(" "),a("h3",{attrs:{id:"webserver-port"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webserver-port"}},[e._v("#")]),e._v(" "),a("code",[e._v("webserver_port")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：BE 上的 http server 的服务端口")]),e._v(" "),a("li",[e._v("默认值：8040")])]),e._v(" "),a("h3",{attrs:{id:"write-buffer-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-buffer-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("write_buffer_size")])]),e._v(" "),a("p",[e._v("默认值：104857600")]),e._v(" "),a("p",[e._v("刷写前缓冲区的大小")]),e._v(" "),a("h3",{attrs:{id:"zone-map-row-num-threshold"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zone-map-row-num-threshold"}},[e._v("#")]),e._v(" "),a("code",[e._v("zone_map_row_num_threshold")])]),e._v(" "),a("ul",[a("li",[e._v("类型： int32")]),e._v(" "),a("li",[e._v("描述: 如果一个page中的行数小于这个值就不会创建zonemap，用来减少数据膨胀")]),e._v(" "),a("li",[e._v("默认值: 20")])]),e._v(" "),a("h3",{attrs:{id:"aws-log-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aws-log-level"}},[e._v("#")]),e._v(" "),a("code",[e._v("aws_log_level")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int32")]),e._v(" "),a("li",[e._v("描述: AWS SDK 的日志级别"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("   Off = 0,\n   Fatal = 1,\n   Error = 2,\n   Warn = 3,\n   Info = 4,\n   Debug = 5,\n   Trace = 6\n")])])])]),e._v(" "),a("li",[e._v("默认值: 3")])]),e._v(" "),a("h3",{attrs:{id:"mem-tracker-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mem-tracker-level"}},[e._v("#")]),e._v(" "),a("code",[e._v("mem_tracker_level")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int16")]),e._v(" "),a("li",[e._v("描述: MemTracker在Web页面上展示的级别，等于或低于这个级别的MemTracker会在Web页面上展示"),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  RELEASE = 0\n  DEBUG = 1\n")])])])]),e._v(" "),a("li",[e._v("默认值: 0")])]),e._v(" "),a("h3",{attrs:{id:"max-segment-num-per-rowset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-segment-num-per-rowset"}},[e._v("#")]),e._v(" "),a("code",[e._v("max_segment_num_per_rowset")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int32")]),e._v(" "),a("li",[e._v("描述: 用于限制导入时，新产生的rowset中的segment数量。如果超过阈值，导入会失败并报错 -238。过多的 segment 会导致compaction占用大量内存引发 OOM 错误。")]),e._v(" "),a("li",[e._v("默认值: 200")])]),e._v(" "),a("h3",{attrs:{id:"remote-storage-read-buffer-mb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#remote-storage-read-buffer-mb"}},[e._v("#")]),e._v(" "),a("code",[e._v("remote_storage_read_buffer_mb")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int32")]),e._v(" "),a("li",[e._v("描述: 读取hdfs或者对象存储上的文件时，使用的缓存大小。")]),e._v(" "),a("li",[e._v("默认值: 16MB")])]),e._v(" "),a("p",[e._v("增大这个值，可以减少远端数据读取的调用次数，但会增加内存开销。")]),e._v(" "),a("h3",{attrs:{id:"external-table-connect-timeout-sec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#external-table-connect-timeout-sec"}},[e._v("#")]),e._v(" "),a("code",[e._v("external_table_connect_timeout_sec")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int32")]),e._v(" "),a("li",[e._v("描述: 和外部表建立连接的超时时间。")]),e._v(" "),a("li",[e._v("默认值: 5秒")])]),e._v(" "),a("h3",{attrs:{id:"segment-cache-capacity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#segment-cache-capacity"}},[e._v("#")]),e._v(" "),a("code",[e._v("segment_cache_capacity")])]),e._v(" "),a("ul",[a("li",[e._v("类型: int32")]),e._v(" "),a("li",[e._v("描述: Segment Cache 缓存的 Segment 最大数量")]),e._v(" "),a("li",[e._v("默认值: 1000000")])]),e._v(" "),a("p",[e._v("默认值目前只是一个经验值，可能需要根据实际场景修改。增大该值可以缓存更多的segment从而避免一些IO。减少该值则会降低内存使用。")]),e._v(" "),a("h3",{attrs:{id:"auto-refresh-brpc-channel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#auto-refresh-brpc-channel"}},[e._v("#")]),e._v(" "),a("code",[e._v("auto_refresh_brpc_channel")])]),e._v(" "),a("ul",[a("li",[e._v("类型: bool")]),e._v(" "),a("li",[e._v("描述: 获取brpc连接时，通过hand_shake rpc 判断连接的可用性，如果不可用则重新建立连接")]),e._v(" "),a("li",[e._v("默认值: false")])]),e._v(" "),a("h3",{attrs:{id:"high-priority-flush-thread-num-per-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#high-priority-flush-thread-num-per-store"}},[e._v("#")]),e._v(" "),a("code",[e._v("high_priority_flush_thread_num_per_store")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：每个存储路径所分配的用于高优导入任务的 flush 线程数量。")]),e._v(" "),a("li",[e._v("默认值：1")])]),e._v(" "),a("h3",{attrs:{id:"routine-load-consumer-pool-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routine-load-consumer-pool-size"}},[e._v("#")]),e._v(" "),a("code",[e._v("routine_load_consumer_pool_size")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：routine load 所使用的 data consumer 的缓存数量。")]),e._v(" "),a("li",[e._v("默认值：10")])]),e._v(" "),a("h3",{attrs:{id:"load-task-high-priority-threshold-second"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#load-task-high-priority-threshold-second"}},[e._v("#")]),e._v(" "),a("code",[e._v("load_task_high_priority_threshold_second")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：当一个导入任务的超时时间小于这个阈值是，Doris 将认为他是一个高优任务。高优任务会使用独立的 flush 线程池。")]),e._v(" "),a("li",[e._v("默认：120")])]),e._v(" "),a("h3",{attrs:{id:"min-load-rpc-timeout-ms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#min-load-rpc-timeout-ms"}},[e._v("#")]),e._v(" "),a("code",[e._v("min_load_rpc_timeout_ms")])]),e._v(" "),a("ul",[a("li",[e._v("类型：int32")]),e._v(" "),a("li",[e._v("描述：load 作业中各个rpc 的最小超时时间。")]),e._v(" "),a("li",[e._v("默认：20")])])])}),[],!1,null,null,null);t.default=r.exports}}]);