(window.webpackJsonp=window.webpackJsonp||[]).push([[452],{905:function(t,e,a){"use strict";a.r(e);var n=a(56),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"not-like"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#not-like"}},[t._v("#")]),t._v(" not like")]),t._v(" "),a("h2",{attrs:{id:"description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" description")]),t._v(" "),a("h3",{attrs:{id:"syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#syntax"}},[t._v("#")]),t._v(" syntax")]),t._v(" "),a("p",[a("code",[t._v("BOOLEAN not like(VARCHAR str, VARCHAR pattern)")])]),t._v(" "),a("p",[t._v("Perform fuzzy matching on the string str, return false if it matches, and return true if it doesn't match.")]),t._v(" "),a("p",[t._v("like match/fuzzy match, will be used in combination with % and _.")]),t._v(" "),a("p",[t._v("the percent sign ('%') represents zero, one, or more characters.")]),t._v(" "),a("p",[t._v("the underscore ('_') represents a single character.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("'a'   // Precise matching, the same effect as `=`\n'%a'  // data ending with a\n'a%'  // data starting with a\n'%a%' // data containing a\n'_a_' // three digits and the middle letter is a\n'_a'  // two digits and the ending letter is a\n'a_'  // two digits and the initial letter is a\n'a__b'  // four digits, starting letter is a and ending letter is b\n")])])]),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[t._v("#")]),t._v(" example")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// table test\n+-------+\n| k1    |\n+-------+\n| b     |\n| bb    |\n| bab   |\n| a     |\n+-------+\n\n// Return data that does not contain a in the k1 string\nmysql> select k1 from test where k1 not like '%a%';\n+-------+\n| k1    |\n+-------+\n| b     |\n| bb    |\n+-------+\n\n// Return the data that is not equal to a in the k1 string\nmysql> select k1 from test where k1 not like 'a';\n+-------+\n| k1    |\n+-------+\n| b     |\n| bb    |\n| bab   |\n+-------+\n")])])]),a("h2",{attrs:{id:"keyword"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keyword"}},[t._v("#")]),t._v(" keyword")]),t._v(" "),a("p",[t._v("LIKE, NOT, NOT LIKE")])])}),[],!1,null,null,null);e.default=s.exports}}]);